#!/bin/bash

################################################################################
# JAX Inventory Optimizer - Complete Feature Demonstration
#
# This script runs all seven dimension tests systematically.
# Each dimension has a dedicated script demonstrating core capabilities.
################################################################################

set -e  # Exit on error

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_header() {
    echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"
}

print_status() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_dim() {
    echo -e "\n${YELLOW}‚ñ∂ $1${NC}"
    echo -e "${YELLOW}  Script: $2${NC}\n"
}

################################################################################
# Main Execution
################################################################################

print_header "JAX Inventory Optimizer - Seven Dimensions Demo"

echo "This demo covers all key system capabilities:"
echo "  1Ô∏è‚É£  Algorithm Coverage (Traditional + ML + RL)"
echo "  2Ô∏è‚É£  Architecture Integrity (Unified Interface)"
echo "  3Ô∏è‚É£  Distributed Training (Multi-GPU Support)"
echo "  4Ô∏è‚É£  MLOps Support (W&B + Profiling)"
echo "  5Ô∏è‚É£  API / Deployment (FastAPI + Docker + K8s)"
echo "  6Ô∏è‚É£  Enterprise Features (Cost + Risk)"
echo "  7Ô∏è‚É£  Research Extensions (Roadmap)"
echo ""

read -p "Press Enter to continue or Ctrl+C to exit..."

################################################################################
# Dimension 1: Algorithm Coverage
################################################################################
print_dim "1Ô∏è‚É£  Algorithm Coverage - Traditional + ML + RL" \
          "experiments/compare_all_methods.py"

python experiments/test_traditional_methods.py
print_status "Traditional methods validated (EOQ, Safety Stock, (s,S) Policy)"

python experiments/compare_all_methods.py
print_status "Full algorithm comparison complete (EOQ vs LSTM vs DQN)"

################################################################################
# Dimension 2: Architecture Integrity
################################################################################
print_dim "2Ô∏è‚É£  Architecture Integrity - Unified Interface" \
          "src/core/interfaces.py"

python -c "
import numpy as np
from src.core.interfaces import InventoryState, BaseMethod, InventoryAction
from src.methods.traditional.eoq import EOQMethod
from src.methods.ml_methods.lstm import LSTMInventoryMethod

print('Testing unified interface:')
# Create sample demand history for fitting
demand_history = np.array([10, 12, 15, 11, 13, 14, 12, 10, 15, 13])
state = InventoryState(50.0, 0.0, demand_history, 0)

for method_cls in [EOQMethod]:
    method = method_cls(holding_cost=1.0, ordering_cost=50.0, unit_cost=10.0)
    # Fit the method before using it
    method.fit(demand_history)
    action = method.decide(state)
    print(f'  {method_cls.__name__}: Order {action.order_quantity:.1f} units')
print('‚úì All methods share unified interface')
"

################################################################################
# Dimension 3: Distributed Training
################################################################################
print_dim "3Ô∏è‚É£  Distributed Training - Multi-GPU Support" \
          "experiments/distributed_training.py"

GPU_COUNT=$(python -c "import jax; print(len([d for d in jax.devices() if 'gpu' in str(d).lower()]))" 2>/dev/null || echo "0")

if [ "$GPU_COUNT" -gt 1 ]; then
    print_status "Multi-GPU detected ($GPU_COUNT GPUs)"
    echo "  Running distributed training demo..."
    python experiments/distributed_training.py --strategy auto --num_epochs 5
else
    print_status "Single-device mode"
    echo "  Distributed training available but requires multi-GPU setup"
    echo "  Strategies: Data Parallel (pmap) | Model Parallel (pjit) | Hybrid"
fi

################################################################################
# Dimension 4: MLOps Support
################################################################################
print_dim "4Ô∏è‚É£  MLOps Support - Experiment Tracking & Profiling" \
          "experiments/demo_mlops.py"

python experiments/demo_mlops.py

################################################################################
# Dimension 5: API / Deployment
################################################################################
print_dim "5Ô∏è‚É£  API / Deployment - Production Ready" \
          "experiments/demo_api.py"

python experiments/demo_api.py

################################################################################
# Dimension 6: Enterprise Features
################################################################################
print_dim "6Ô∏è‚É£  Enterprise Features - Cost Optimization & Risk" \
          "experiments/demo_enterprise.py"

python experiments/demo_enterprise.py

################################################################################
# Dimension 7: Research Extensions
################################################################################
print_dim "7Ô∏è‚É£  Research Extensions - Future Roadmap" \
          "docs/METHODS.md"

cat << 'EOF'
üìã Planned Research Directions:

1. Multi-Echelon Optimization
   ‚îî‚îÄ Graph neural networks for supply chain networks
   ‚îî‚îÄ Hierarchical RL for coordinated replenishment

2. Causal Demand Modeling
   ‚îî‚îÄ Structural causal models (SCM)
   ‚îî‚îÄ Causal discovery algorithms
   ‚îî‚îÄ Do-calculus for intervention analysis

3. Meta-Learning & Online Adaptation
   ‚îî‚îÄ MAML for few-shot learning
   ‚îî‚îÄ Real-time distribution shift detection
   ‚îî‚îÄ Continuous model updating with minimal overhead

Status: Architecture supports extensibility via BaseMethod interface
EOF

print_status "Research roadmap documented"

################################################################################
# Summary
################################################################################
print_header "Demonstration Complete"

cat << 'EOF'

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                      SYSTEM STATUS SUMMARY                          ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Dimension                 ‚îÇ Status ‚îÇ Key Script                     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ 1Ô∏è‚É£  Algorithm Coverage    ‚îÇ   ‚úÖ   ‚îÇ compare_all_methods.py         ‚îÇ
‚îÇ 2Ô∏è‚É£  Architecture          ‚îÇ   ‚úÖ   ‚îÇ src/core/interfaces.py         ‚îÇ
‚îÇ 3Ô∏è‚É£  Distributed Training  ‚îÇ   ‚öôÔ∏è   ‚îÇ distributed_training.py        ‚îÇ
‚îÇ 4Ô∏è‚É£  MLOps Support         ‚îÇ   ‚úÖ   ‚îÇ demo_mlops.py                  ‚îÇ
‚îÇ 5Ô∏è‚É£  API / Deployment      ‚îÇ   ‚úÖ   ‚îÇ demo_api.py                    ‚îÇ
‚îÇ 6Ô∏è‚É£  Enterprise Features   ‚îÇ   ‚úÖ   ‚îÇ demo_enterprise.py             ‚îÇ
‚îÇ 7Ô∏è‚É£  Research Extensions   ‚îÇ   üöÄ   ‚îÇ (Roadmap defined)              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Legend:
  ‚úÖ = Fully implemented       ‚öôÔ∏è = Requires specific hardware
  üöß = In development          üöÄ = Planned for future

EOF

echo -e "${GREEN}All demonstrations completed successfully!${NC}\n"

echo "Next Steps:"
echo "  üìä View results: results/comparisons/"
echo "  üöÄ Start API: uvicorn src.api.main:app --reload"
echo "  üê≥ Deploy: docker-compose up"
echo "  üìñ Documentation: README.md"
echo ""
